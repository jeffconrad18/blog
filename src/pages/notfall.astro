---
import Layout from '@/layouts/Layout.astro'
import themeConfig from '@/config'

// Lade verschl√ºsselte Daten
import encryptedData from '../../notfall.encrypted.json'

const pageTitle = 'Notfall-Informationen'
const pageDescription = 'Verschl√ºsselte Notfall-Kontakte und wichtige Informationen'
---

<Layout postTitle={pageTitle} postDescription={pageDescription}>
  <article class="prose post-body">
    <h1 class="post-title">üö® Notfall-Informationen</h1>
    
    <div id="password-section" class="notfall-container">
      <div class="password-box">
        <p class="intro-text">
          Diese Seite enth√§lt verschl√ºsselte Notfall-Informationen.<br />
          Bitte gib das Passwort ein, um sie zu entschl√ºsseln.
        </p>
        
        <div class="password-input-wrapper">
          <input
            type="password"
            id="password-input"
            placeholder="Passwort eingeben"
            autocomplete="off"
            class="password-input"
          />
          <button id="decrypt-button" class="btn-primary">
            Entschl√ºsseln
          </button>
        </div>
        
        <div id="error-message" class="error-message hidden"></div>
        <div id="loading" class="loading hidden">
          <div class="spinner"></div>
          <p>Entschl√ºssele Daten...</p>
        </div>
      </div>
    </div>
    
    <div id="content-section" class="hidden">
      <div class="success-message">
        ‚úÖ Erfolgreich entschl√ºsselt!
      </div>
      <div id="decrypted-content" class="decrypted-content markdown-body"></div>
      <button id="lock-button" class="btn-secondary">
        üîí Wieder verschl√ºsseln
      </button>
    </div>
  </article>
</Layout>

<style>
  .post-body {
    max-width: 65ch;
    margin: 0 auto;
  }

  .post-title {
    text-align: center;
    margin-bottom: 2rem;
    color: var(--color-primary);
  }

  .intro-text {
    text-align: center;
    margin-bottom: 1.5rem;
    color: var(--color-secondary);
    line-height: 1.6;
  }

  .notfall-container {
    padding: 2rem;
    border-radius: 1rem;
    background: var(--color-background);
    border: 1px solid color-mix(in oklch, var(--color-primary) 12%, transparent);
    margin: 2rem 0;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  }

  .password-box {
    max-width: 32rem;
    margin: 0 auto;
  }

  .password-input-wrapper {
    display: flex;
    gap: 0.75rem;
    flex-direction: column;
  }

  @media (min-width: 640px) {
    .password-input-wrapper {
      flex-direction: row;
    }
  }

  .password-input {
    flex: 1;
    padding: 0.75rem 1rem;
    font-size: 1rem;
    border: 1px solid color-mix(in oklch, var(--color-primary) 20%, transparent);
    border-radius: 0.75rem;
    background: var(--color-background);
    color: var(--color-primary);
    transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);
    font-family: inherit;
  }

  .password-input:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow: 0 0 0 3px var(--color-highlight);
  }

  .password-input::placeholder {
    color: var(--color-secondary);
    opacity: 0.6;
  }

  .btn-primary,
  .btn-secondary {
    padding: 0.75rem 1.5rem;
    font-size: 1rem;
    font-weight: 500;
    border: 1px solid var(--color-primary);
    border-radius: 0.75rem;
    background: var(--color-primary);
    color: var(--color-background);
    cursor: pointer;
    transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);
    white-space: nowrap;
    font-family: inherit;
  }

  .btn-primary:hover,
  .btn-secondary:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .btn-primary:active,
  .btn-secondary:active {
    transform: translateY(0);
  }

  .btn-primary:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }

  .btn-secondary {
    display: block;
    margin: 0 auto;
    background: transparent;
    color: var(--color-primary);
    border-color: color-mix(in oklch, var(--color-primary) 30%, transparent);
  }

  .btn-secondary:hover {
    background: var(--color-primary);
    color: var(--color-background);
    border-color: var(--color-primary);
  }

  .error-message {
    margin-top: 1rem;
    padding: 0.75rem 1rem;
    border-radius: 0.75rem;
    background: oklch(0.65 0.2 29 / 0.1);
    border: 1px solid oklch(0.65 0.2 29 / 0.3);
    color: oklch(0.55 0.2 29);
    text-align: center;
    font-size: 0.95rem;
  }

  .success-message {
    margin-bottom: 1.5rem;
    padding: 0.75rem 1rem;
    border-radius: 0.75rem;
    background: oklch(0.75 0.15 145 / 0.1);
    border: 1px solid oklch(0.75 0.15 145 / 0.3);
    color: oklch(0.55 0.15 145);
    text-align: center;
    font-weight: 500;
  }

  .loading {
    margin-top: 1rem;
    text-align: center;
    color: var(--color-secondary);
  }

  .spinner {
    margin: 0 auto 0.5rem;
    width: 40px;
    height: 40px;
    border: 3px solid color-mix(in oklch, var(--color-primary) 15%, transparent);
    border-top-color: var(--color-primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  .hidden {
    display: none !important;
  }

  .decrypted-content {
    padding: 2rem;
    border-radius: 1rem;
    background: var(--color-background);
    border: 1px solid color-mix(in oklch, var(--color-primary) 12%, transparent);
    margin-bottom: 1.5rem;
    max-height: 70vh;
    overflow-y: auto;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  }

  /* Markdown-Styling im entschl√ºsselten Inhalt */
  .markdown-body {
    font-size: 1rem;
    line-height: 1.75;
    color: var(--color-primary);
  }

  .markdown-body h1,
  .markdown-body h2,
  .markdown-body h3,
  .markdown-body h4 {
    color: var(--color-primary);
    font-weight: 600;
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
    line-height: 1.3;
  }

  .markdown-body h1 {
    font-size: 1.5rem;
    border-bottom: 2px solid color-mix(in oklch, var(--color-primary) 15%, transparent);
    padding-bottom: 0.5rem;
  }

  .markdown-body h2 {
    font-size: 1.25rem;
    border-bottom: 1px solid color-mix(in oklch, var(--color-primary) 10%, transparent);
    padding-bottom: 0.4rem;
  }

  .markdown-body h3 {
    font-size: 1.1rem;
  }

  .markdown-body p {
    margin: 0.75rem 0;
    color: var(--color-secondary);
  }

  .markdown-body ul,
  .markdown-body ol {
    margin: 1rem 0;
    padding-left: 1.75rem;
    color: var(--color-secondary);
  }

  .markdown-body li {
    margin: 0.375rem 0;
  }

  .markdown-body strong {
    font-weight: 600;
    color: var(--color-primary);
  }

  .markdown-body code {
    background: color-mix(in oklch, var(--color-primary) 8%, transparent);
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
    font-family: 'Courier New', monospace;
    font-size: 0.9em;
    color: var(--color-primary);
  }

  .markdown-body pre {
    background: color-mix(in oklch, var(--color-primary) 8%, transparent);
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin: 1rem 0;
  }

  .markdown-body pre code {
    background: transparent;
    padding: 0;
  }

  .markdown-body hr {
    border: none;
    border-top: 1px solid color-mix(in oklch, var(--color-primary) 12%, transparent);
    margin: 1.5rem 0;
  }

  .markdown-body a {
    color: var(--color-primary);
    text-decoration: underline;
    text-decoration-color: var(--color-highlight);
    transition: all 0.2s;
  }

  .markdown-body a:hover {
    background: var(--color-highlight);
  }

  .markdown-body blockquote {
    border-left: 3px solid color-mix(in oklch, var(--color-primary) 30%, transparent);
    padding-left: 1rem;
    margin: 1rem 0;
    font-style: italic;
    color: var(--color-secondary);
  }
</style>

<script define:vars={{ encryptedData }}>
  // Verschl√ºsselte Daten aus Astro
  const ENCRYPTED_DATA = encryptedData;

  // DOM-Elemente
  const passwordInput = document.getElementById('password-input');
  const decryptButton = document.getElementById('decrypt-button');
  const lockButton = document.getElementById('lock-button');
  const errorMessage = document.getElementById('error-message');
  const loading = document.getElementById('loading');
  const passwordSection = document.getElementById('password-section');
  const contentSection = document.getElementById('content-section');
  const decryptedContent = document.getElementById('decrypted-content');

  /**
   * Einfacher Markdown-zu-HTML-Converter
   */
  function parseMarkdown(markdown) {
    let html = markdown;

    // Escape HTML
    html = html.replace(/&/g, '&amp;')
               .replace(/</g, '&lt;')
               .replace(/>/g, '&gt;');

    // Headers
    html = html.replace(/^### (.*$)/gim, '<h3>$1</h3>');
    html = html.replace(/^## (.*$)/gim, '<h2>$1</h2>');
    html = html.replace(/^# (.*$)/gim, '<h1>$1</h1>');

    // Bold
    html = html.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
    html = html.replace(/__(.*?)__/g, '<strong>$1</strong>');

    // Italic
    html = html.replace(/\*(.*?)\*/g, '<em>$1</em>');
    html = html.replace(/_(.*?)_/g, '<em>$1</em>');

    // Links
    html = html.replace(/\[([^\]]+)\]\(([^\)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer">$1</a>');

    // Code blocks
    html = html.replace(/```(.*?)```/gs, '<pre><code>$1</code></pre>');
    
    // Inline code
    html = html.replace(/`([^`]+)`/g, '<code>$1</code>');

    // Horizontal rules
    html = html.replace(/^[-*_]{3,}$/gim, '<hr>');

    // Lists (unordered)
    html = html.replace(/^\s*[-*+]\s+(.+)$/gim, '<li>$1</li>');
    html = html.replace(/(<li>.*<\/li>)/s, '<ul>$1</ul>');

    // Lists (ordered)
    html = html.replace(/^\s*\d+\.\s+(.+)$/gim, '<li>$1</li>');
    
    // Line breaks and paragraphs
    html = html.split('\n\n').map(para => {
      // Wenn es schon ein HTML-Block ist, nicht wrappen
      if (para.match(/^<(h[1-6]|ul|ol|pre|hr|blockquote)/)) {
        return para;
      }
      // Leere Zeilen ignorieren
      if (para.trim() === '') {
        return '';
      }
      // Sonst als Paragraph wrappen
      return '<p>' + para.replace(/\n/g, '<br>') + '</p>';
    }).join('\n');

    return html;
  }

  /**
   * Leitet Schl√ºssel aus Passwort ab (PBKDF2)
   */
  async function deriveKey(password, salt, iterations) {
    const encoder = new TextEncoder();
    const passwordKey = await crypto.subtle.importKey(
      'raw',
      encoder.encode(password),
      'PBKDF2',
      false,
      ['deriveBits', 'deriveKey']
    );

    return crypto.subtle.deriveKey(
      {
        name: 'PBKDF2',
        salt: salt,
        iterations: iterations,
        hash: 'SHA-256'
      },
      passwordKey,
      { name: 'AES-GCM', length: 256 },
      false,
      ['decrypt']
    );
  }

  /**
   * Base64 zu Uint8Array
   */
  function base64ToUint8Array(base64) {
    const binaryString = atob(base64);
    const bytes = new Uint8Array(binaryString.length);
    for (let i = 0; i < binaryString.length; i++) {
      bytes[i] = binaryString.charCodeAt(i);
    }
    return bytes;
  }

  /**
   * Entschl√ºsselt die Daten mit AES-256-GCM
   */
  async function decryptData(password) {
    try {
      // Dekodiere Base64-Daten
      const salt = base64ToUint8Array(ENCRYPTED_DATA.salt);
      const nonce = base64ToUint8Array(ENCRYPTED_DATA.nonce);
      const ciphertext = base64ToUint8Array(ENCRYPTED_DATA.ciphertext);

      // Leite Schl√ºssel ab
      const key = await deriveKey(password, salt, ENCRYPTED_DATA.iterations);

      // Entschl√ºssele
      const decrypted = await crypto.subtle.decrypt(
        {
          name: 'AES-GCM',
          iv: nonce
        },
        key,
        ciphertext
      );

      // Konvertiere zu Text
      const decoder = new TextDecoder();
      return decoder.decode(decrypted);
    } catch (error) {
      throw new Error('Falsches Passwort oder besch√§digte Daten');
    }
  }

  /**
   * Zeigt Fehler an
   */
  function showError(message) {
    errorMessage.textContent = message;
    errorMessage.classList.remove('hidden');
    setTimeout(() => {
      errorMessage.classList.add('hidden');
    }, 5000);
  }

  /**
   * Entschl√ºsselungs-Handler
   */
  async function handleDecrypt() {
    const password = passwordInput.value;

    if (!password) {
      showError('Bitte gib ein Passwort ein');
      return;
    }

    // Zeige Loading
    loading.classList.remove('hidden');
    errorMessage.classList.add('hidden');
    decryptButton.disabled = true;

    try {
      // Entschl√ºssele (simuliere etwas Verz√∂gerung f√ºr UX)
      await new Promise(resolve => setTimeout(resolve, 300));
      const decrypted = await decryptData(password);

      // Parse Markdown zu HTML
      const htmlContent = parseMarkdown(decrypted);

      // Zeige entschl√ºsselten Inhalt
      decryptedContent.innerHTML = htmlContent;
      passwordSection.classList.add('hidden');
      contentSection.classList.remove('hidden');

      // L√∂sche Passwort aus Input
      passwordInput.value = '';
    } catch (error) {
      showError(error.message);
      decryptButton.disabled = false;
    } finally {
      loading.classList.add('hidden');
    }
  }

  /**
   * Verschl√ºsselungs-Handler (versteckt Inhalt wieder)
   */
  function handleLock() {
    decryptedContent.innerHTML = '';
    contentSection.classList.add('hidden');
    passwordSection.classList.remove('hidden');
    passwordInput.value = '';
    passwordInput.focus();
    decryptButton.disabled = false;
  }

  // Event Listeners
  decryptButton.addEventListener('click', handleDecrypt);
  lockButton.addEventListener('click', handleLock);
  
  passwordInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      handleDecrypt();
    }
  });

  // Fokussiere Input beim Laden
  passwordInput.focus();
</script>
</Layout>
